# .github/workflows/reusable-ci.yml
# This workflow lives in a central repository for reusable workflows.
# It handles building, analyzing, testing, and creating artifacts for a Flutter project.

name: "Reusable Flutter CI"

on:
  workflow_call:
    inputs:
      flutter_version:
        required: true
        type: string
      flutter_channel:
        required: true
        type: string
      coverage_threshold:
        required: true
        type: string
      build_ios:
        required: false
        type: boolean
        default: false
    secrets:
      SONAR_TOKEN:
        required: false
      CODACY_PROJECT_TOKEN:
        required: false

jobs:
  # This job sets up the environment and dependencies once.
  # It then uploads the entire workspace as an artifact for other jobs to use.
  setup:
    name: Setup Environment & Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter_version }}
          channel: ${{ inputs.flutter_channel }}
          cache: true # Enable caching for faster subsequent runs

      - name: Install Dependencies
        run: flutter pub get

      - name: Upload Workspace
        uses: actions/upload-artifact@v4
        with:
          name: workspace
          path: .

  # This job runs analysis and tests in parallel.
  analyze_and_test:
    name: Analyze & Test
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download Workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter_version }}
          channel: ${{ inputs.flutter_channel }}
          cache: true

      - name: Run Dart Analyzer
        run: dart analyze > analyzer-report.txt

      - name: Upload Analyzer Report
        uses: actions/upload-artifact@v4
        with:
          name: analyzer-report
          path: analyzer-report.txt

      - name: Run Tests and Generate Coverage
        run: flutter test --coverage

      - name: Upload Coverage Info
        uses: actions/upload-artifact@v4
        with:
          name: coverage-info
          path: coverage/lcov.info

  # This job specifically checks if coverage meets the threshold.
  check_coverage:
    name: Verify Test Coverage
    needs: analyze_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Download Coverage Info
        uses: actions/download-artifact@v4
        with:
          name: coverage-info
          path: .

      - name: Install lcov
        run: sudo apt-get update && sudo apt-get install -y lcov

      - name: Check Coverage Threshold
        run: |
          total_coverage=$(lcov --summary lcov.info | grep -Po 'lines\.*: \K[0-9.]+(?=%)')
          echo "Total Coverage: $total_coverage%"
          if (( $(echo "$total_coverage < ${{ inputs.coverage_threshold }}" | bc -l) )); then
            echo "Error: Code coverage ($total_coverage%) is below the required threshold of ${{ inputs.coverage_threshold }}%."
            exit 1
          else
            echo "Success: Code coverage meets the threshold."
          fi

  # Build the Android APK.
  build_android:
    name: Build Android APK
    needs: [check_coverage, analyze_and_test]
    runs-on: ubuntu-latest
    steps:
      - name: Download Workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .
          
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter_version }}
          channel: ${{ inputs.flutter_channel }}
          cache: true
      
      - name: Build APK
        run: flutter build apk --split-per-abi
      
      - name: Upload APK Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-apk
          path: build/app/outputs/flutter-apk/

  # Build the iOS App (conditionally).
  build_ios:
    name: Build iOS App
    if: ${{ inputs.build_ios }}
    needs: [check_coverage, analyze_and_test]
    runs-on: macos-latest # iOS builds MUST run on macOS
    steps:
      - name: Download Workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ inputs.flutter_version }}
          channel: ${{ inputs.flutter_channel }}
          cache: true
      
      - name: Build iOS IPA
        run: flutter build ipa --no-codesign
      
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-ipa
          path: build/ios/ipa/
