# .github/workflows/reusable-cd.yml
# This workflow handles the Continuous Deployment process.
# 1. Creates a GitHub Release.
# 2. Attaches build artifacts (APK/IPA) to the release.
# 3. Conditionally runs Terraform to deploy/update cloud infrastructure.

name: "Reusable Flutter CD"

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      deploy_to_cloud:
        required: false
        type: boolean
        default: false
      terraform_working_dir:
        required: false
        type: string
        default: './terraform'
      # --- NEW: Flags to enable deployment to specific clouds ---
      enable_aws:
        required: false
        type: boolean
        default: false
      enable_gcp:
        required: false
        type: boolean
        default: false
      enable_azure:
        required: false
        type: boolean
        default: false
    secrets:
      PAT_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      GOOGLE_CREDENTIALS:
        required: false
      ARM_CLIENT_ID:
        required: false
      ARM_CLIENT_SECRET:
        required: false
      ARM_SUBSCRIPTION_ID:
        required: false
      ARM_TENANT_ID:
        required: false

jobs:
  create_release:
    name: Create GitHub Release and Upload Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Download APK Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-apk
          path: apks

      # Note: Add a similar step to download 'build-ipa' if you build for iOS

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: v${{ inputs.version }}
          release_name: Release v${{ inputs.version }}
          body: "Automated release for version ${{ inputs.version }}."
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./apks/app-armeabi-v7a-release.apk
          asset_name: app-armeabi-v7a-v${{ inputs.version }}.apk
          asset_content_type: application/vnd.android.package-archive
      
      # Add more upload steps for other APK splits (arm64-v8a, x86_64) and the IPA if needed.

  deploy:
    name: Deploy to Cloud with Terraform
    if: ${{ inputs.deploy_to_cloud }}
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0" # Specify your desired version

      # --- Cloud Provider Authentication ---
      # The workflow will only run the block for which secrets are provided.

      - name: Authenticate to AWS
        if: ${{ inputs.enable_aws && secrets.AWS_ACCESS_KEY_ID != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1" # Or your desired region

      - name: Authenticate to Google Cloud
        if: ${{ inputs.enable_gcp && secrets.GOOGLE_CREDENTIALS != '' }}
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: Authenticate to Azure
        if: ${{ inputs.enable_azure && secrets.ARM_CLIENT_ID != '' }}
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          client-secret: ${{ secrets.ARM_CLIENT_SECRET }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
      
      # --- Run Terraform ---
      - name: Terraform Init
        id: init
        run: terraform -chdir="${{ inputs.terraform_working_dir }}" init

      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir="${{ inputs.terraform_working_dir }}" plan -no-color \
            -var="app_version=${{ inputs.version }}" \
            -var="enable_aws=${{ inputs.enable_aws }}" \
            -var="enable_gcp=${{ inputs.enable_gcp }}" \
            -var="enable_azure=${{ inputs.enable_azure }}"
        continue-on-error: true

      - name: Terraform Apply
        id: apply
        if: steps.plan.outcome == 'success'
        run: |
          terraform -chdir="${{ inputs.terraform_working_dir }}" apply -auto-approve \
            -var="app_version=${{ inputs.version }}" \
            -var="enable_aws=${{ inputs.enable_aws }}" \
            -var="enable_gcp=${{ inputs.enable_gcp }}" \
            -var="enable_azure=${{ inputs.enable_azure }}"
